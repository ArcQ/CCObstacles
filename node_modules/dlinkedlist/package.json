{
  "name": "dlinkedlist",
  "version": "1.2.6",
  "description": "Double Linked List in Javascript",
  "author": {
    "name": "ArcQ",
    "email": "eddielaw296@gmail.com"
  },
  "scripts": {
    "test": "mocha"
  },
  "main": "DLinkedList.js",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/ArcQ/DoublyLinkedListJS.git"
  },
  "bugs": {
    "url": "https://github.com/ArcQ/DoublyLinkedListJS/issues"
  },
  "keywords": [],
  "dependencies": {},
  "devDependencies": {
    "browserify": "^12.0.1",
    "chai": "^3.4.1",
    "gulp": "3.9.0",
    "gulp-mocha": "^2.2.0",
    "gulp-sourcemaps": "^1.6.0",
    "gulp-uglify": "^1.5.1",
    "gulp-util": "^3.0.7",
    "vinyl-buffer": "^1.0.0",
    "vinyl-source-stream": "^1.1.0"
  },
  "license": "MIT",
  "readme": "#DoublyLinkedListJS\n\nSimple Doubly Linked List implemented in Javascript (Browserified).\nhttps://github.com/ArcQ/DoublyLinkedListJS\n\nInstall:\n```bash\nnpm install dlinkedlist\n```\n##Iteration\n\n#####Apply To Every Node\nTo apply a callback function one very node, use list.applyToEveryNode() which takes 1-2 arguments:\n\n1. callback (required), returns true if you want to continue (return true to apply to all nodes)\n2. arg: optional, if you need to plug arguments into callback\n\n```javascript\nfunction MakeAllNodesZero(){\n  var makeNodeZero = function(currentNode,arg){\n    console.log(arg.test);\n    currentNode.obj = 0;\n    return true;\n  }\n  var callbackArgument = {test};\n  linkedListTest.applyToEveryNode(makeNodeZero,callbackArgument);\n}\n```\n//iterate takes 3-4 arguments\n\n#####Iterate With Stop Condition\nTo iterate and apply your callback for a select number of nodes, use list.iterate() which takes 3-4 arguments\n\n1. callback (required), returns true if you want to continue (return true to apply to all nodes)\n2. isForward: true for forwards iteration(required) or false backwards iteration\n3. starting node\n4. arg: optional, if you need to plug arguments into callback\n\n```javascript\nfunction Iterate(){   \n    var i = 0;\n    var iterateCallback = function(currentNode){\n        currentNode.obj = i;\n        i++;\n        if(i<3){\n            return true;\n        }\n        else{\n            return false;\n        }\n    }\n    var startingNode = linkedListTest.tail.prev;\n    linkedListTest.iterate(iterateCallback,false,startingNode);\n  }\n```\n\n##Basic Usage\n#####Create\nAfter importing DLinkedList.js\n```javascript\nvar list = window.dLinkedList();\n```\n#####Basic Node Structure\n```javascript\nvar node = {\n\t\tobj: obj,\n\t\tnext: null,\n\t\tprev: null\n\t};\n```\n\n#####Push\n```javascript\nvar newNode = list.push(1);\n```\n\n#####FindFirst\n```javascript\nvar oneNode = linkedListTest.findFirst(1);\n```\n\n#####Insert\n```javascript\n//insert 8 after 5\nvar oneNode = linkedListTest.findFirst(1);\nif (oneNode !== undefined)\n{\n    linkedListTest.insertAfter(oneNode,2);\n    linkedListTest.insertBefore(oneNode,3);\n}\n\n```\n\n####Remove\n```javascript\noneNode = linkedListTest.findFirst(1);\nlinkedListTest.remove(oneNode);\n```\n\n",
  "readmeFilename": "README.md",
  "gitHead": "1623c80b5448cd707287147a59ad177592af0756",
  "homepage": "https://github.com/ArcQ/DoublyLinkedListJS#readme",
  "_id": "dlinkedlist@1.2.6",
  "_shasum": "3adacabebc727a74ce3776141c555a9b912f2e7e",
  "_from": "dlinkedlist@1.2.6"
}
